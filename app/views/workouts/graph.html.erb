<% @primary_heading = content_tag(:h1, link_to( @workout.name, :action => "show"), :id => "workout_name_#{@workout.id}" ) %>
<% @editable = @sharing ? false : true %>
<% @secondary_heading = content_tag :span, nice_datetime(@workout.performed_on), :class => "larger", :id => "workout_date_#{@workout.id}" %>
<% @secondary_links = [
  { :text => 'Summary', :options => {:action => 'show', :id => @workout.id} }, 
  { :text => 'Graph', :options => {:action => 'graph', :id => @workout.id } } ] %>

<div id="main">
  <% rounded_box nil, "complete", "full" do %> 
    <div class="zoom">   
      <a href="#" id='zoom_reset' class='smaller' onClick="return false;">Zoom Out</a>
    </div>
    <% container "full" do %>
      
      <div id="plot" class="plot" style="height:400px;">
        
        <div id="loader" style="padding-top: 150px; text-align:center">
        <%= image_tag("loader.gif") %><br/>
        Loading graph.</div>
      </div>
        <div id="graph_summary">      
        <table border="0" cellspacing="0" cellpadding="1">
            <tr>
              <td>Time : <span id="selected_time">00:00:00</span></td>
              <td>Power : <span id="selected_power">0</span> W</td>
              <!--<td>Speed : <span id="selected_speed">0</span> mph</td>
              <td>Cadence : <span id="selected_cadence">0</span> rpm</td>
              <td>Heartrate : <span id="selected_heartrate">0</span> bpm</td> -->
            </tr>
          </table>
        
        </div>
        <div class="smaller right">Note: Click and drag to see in on more detail.</div>
          
    <% end %>
  <% end %>
  
  <%= render :partial => 'common/back' %>
  
</div>

<script type="text/javascript">
	/**
	 * Wait till dom's finished loading.
	 */
   const POWER = 0;
   const SPEED = 1;
   const CADENCE = 2;
   const HEARTRATE = 3;
   var time_series;
   var data_series;
      
   var prev_time_series;
   var prev_data_series;

   
   var global_options = {
     grid: { 
       backgroundColor:'#FFFFFF' }, 
     xaxis: {
       tickFormatter: xAxisFormatter
     },
     selection: {
       mode: 'x'
     },
    mouse: { 
       lineColor: '#444444', 
       sensibility: 2, 
       track: false
     },
     legend: {
       backgroundOpacity: 0.85,
       show: true,
       location: 'ne'
     }, 
     shadowSize: 0
    } 
	 
    function xAxisFormatter(label) {
      //var date = new Date();
      //date.setTime(label*2 * 1000);
      //var hours = (date.getUTCHours() < 10 ? '0' : '') + date.getUTCHours();
      //var minutes = (date.getUTCMinutes() < 10 ? '0' : '') + date.getUTCMinutes();
      //return hours + ':' + minutes;
      
      //var pos = event.memo[1];
      var i=Math.round(label)-1;
      if(i<0) return;
      return time_series[0]['data'][i][1];

    }
	
  	function drawPlot (series, options) {
  	 var opts = Object.extend(Object.clone(global_options), options || {});
  	 return Flotr.draw($('plot'), series, opts);
  	}
  	

	document.observe('dom:loaded', function(){
	  Element.hide('zoom_reset');
	  var url = "<%= url_for(:action => 'show', :id => @workout.id, :format => 'json') %>"
	  new Ajax.Request(url, {
  		method:'get',
  		onSuccess: function(transport){
  			var json = transport.responseText.evalJSON();
  			data_series = json.data_series
  			time_series = json.time_series
  			
  			if(data_series){
  			  var smoothing_factor = data_series[0]['data'].length/500;
          //smoothed_data = 
          //alert(smoothing_factor);
          //smoothed_data = [new Object()];
          //smoothed_data[0].data = new Array();
          //smoothed_data[0].label = "Blah";
          
          //smoothed_data[POWER]['data'] = data_series[POWER]['data'].eachSlice(1500).first();
        

  				$('plot').setStyle({'display':'block'});
          //var f = drawPlot(data_series);
          var f = drawPlot(data_series);
        }
  		}
  	});
  });
  
  $('plot').observe('flotr:mousemove', function(event){
    var pos = event.memo[1];
    //for(int i=0; i< )
    var i=Math.round(pos.x);
    if(i<0) return;
    //alert('Power:' + json_series[0][i][1] + 'Heartrate:' + json_series[1][i][1]);
    $('selected_time').innerHTML = time_series[0]['data'][i][1];
    $('selected_power').innerHTML = data_series[POWER]['data'][i][1];
    $('selected_speed').innerHTML = data_series[SPEED]['data'][i][1];
    $('selected_cadence').innerHTML = data_series[CADENCE]['data'][i][1];
    $('selected_heartrate').innerHTML = data_series[HEARTRATE]['data'][i][1];
	});	
	
	$('plot').observe('mouseout', function(event){
    $('selected_time').innerHTML = '00:00:00' 
    $('selected_power').innerHTML = '0' 
    //$('selected_speed').innerHTML = '0' 
    //$('selected_cadence').innerHTML = '0' 
    //$('selected_heartrate').innerHTML = '0' 

	});
	
	$('plot').observe('flotr:select', function(event){
  	var selection = event.memo[0];
  	begin = Math.round(selection.x1)
  	end = Math.round(selection.x2)
  	
 	  var url = "<%= url_for(:action => 'show', :id => @workout.id, :format => 'json') %>" + "?begin=" + begin + "&end=" + end
	  new Ajax.Request(url, {
  		method:'get',
  		onSuccess: function(transport){
  			var json = transport.responseText.evalJSON();
  		  
  			prev_time_series=time_series
  			prev_data_series=data_series
  			time_series = json.time_series
  			data_series = json.data_series
  			
  			if(data_series){
  				$('plot').setStyle({'display':'block'});
          drawPlot(data_series, {});
        }
  		}
  	});
  	
    
  	//zoom_data[POWER]['data'] = data_series[POWER]['data'].slice(selection.x1,selection.x2);
  	//f = drawPlot(zoom_data_series);
  	Element.show('zoom_reset');
	});
	
	$('zoom_reset').observe('click', function() { 
	  time_series = prev_time_series
	  data_series = prev_data_series
	  drawPlot(data_series, {}); Element.hide('zoom_reset'); 
	});
</script>